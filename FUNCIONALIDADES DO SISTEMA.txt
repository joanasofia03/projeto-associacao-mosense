FUNCIONALIDADES DO SISTEMA

1. Mostrar um menu.
É constituído por data hora de criação e vários itens, cada um com a respetiva quantidade (que é sempre 1) e preço.

2. Registar pedidos. 
Cada pedido pode conter vários itens do menu, tem um número (começa em 1 e vai incrementando, e reseta a cada novo dia), o nome da pessoa que fez o pedido e o nome da pessoa que registou o pedido (pode ser obtido através da sessão do utilizador). O pedido deve apresentar todos os itens, o preço por item e o preço total, e o número. Adicionalmente, um pedido tem uma data hora de criação associada e um estados com 2 valores possíveis. Serve para nos dizer se um pedido foi alterado ou não. Quando alguém regista um pedido errado esse pedido deve ser alterado, mas o pedido inicial não deve ser eliminado. Eventualmente esses itens vão ser adquiridos por outras pessoas, mas o software não tem essa particularidade em conta. Por fim, cada item num pedido pode ser levantado mais tarde ou não, devendo isso ser indicado também.

3. Alterar um pedido.
Quando se quiser alterar um pedido, deve selecionar-se um pedido da lista de pedidos, ou pesquisar pelo seu número, nome, entre outros, e proceder-se à alteração do pedido.

3. Imprimir um pedido. 
Quando um pedido é registado uma impressora imprime um ticket com a informação relevante do pedido logo a seguir.

4. Levantar pedidos.
Quando um pedido chega à cozinha e é dado início à sua preparação, o pedido passa a "Concluído", através da ação de alguém nesse lugar.

5. Visualizar os pedidos e ordená-los segundo vários critérios.

6. Contagem do nº de pedidos.

7. Contagem do dinheiro faturado.

(as funcionalidades 5, 6 e 7 podem ser apresentadas na mesma página)

8. Criar itens, menu, e outros.

9. Gestão das contas de utilizadores.
O Administrador do Sistema não necessita de ser criado e tem acesso a todas as funcionalidades. Somente ele pode gerir as contas de utilizadores, ver a contagem do dinheiro, ter acesso à base de dados, entre outros a definir. É ele quem cria todos os outros utilizadores. Teremos outro tipo de utilizador, que será quem está na banca a registar os pedidos e a guardar o dinheiro. 

NÃO HÁ DEVOLUÇÕES.

@startuml

hide methods
left to right direction
hide circles

class Administrador 
note right
Administrador é um conceito do negócio e dos componentes de autenticação
end note

class Item {
nomeDoItem
precoDoItem
isMenu
}

class Menu {
}

class Pedido {
dataHoraDeCriacaoDoPedido
numeroDoPedido
nota
}
note right
Pode ter Itens para levantar mais tarde
end note

class estadoDeAlteracaoDoPedido {
descricaoDoEstado
}

class estadoDeConclusaoDoPedido {
descricaoDoEstado
}

class FuncionarioDaBanca
note right
FuncionarioDaBanca é um conceito do negócio e dos componentes de autenticação
end note

class UtilizadorNaoRegistado
note right
UtilizadorNaoRegistado é um conceito do negócio e dos componentes de autenticação
end note

class Ticket

class Cliente

Administrador "1" -- "1..*" Menu: cria >
Administrador "1" -- "1..*" Pedido: gerir >
Administrador "1" -- "1..*" FuncionarioDaBanca: cria >
Administrador "1" -- "1..*" Item: cria >
FuncionarioDaBanca "1" -- "1..*" Pedido: pode alterar >
FuncionarioDaBanca "1" -- "1..*" Pedido: pode listar >
Menu "1" -- "1..*" Item: tem >
Pedido "1" -- "1..*" Item: tem >
UtilizadorNaoRegistado "1" -- "1" Menu: vê >
Administrador "1" -- "1" Menu: vê >
FuncionarioDaBanca "1" -- "1" Menu: vê >
Administrador "1" -- "1..*" Menu: cria >
FuncionarioDaBanca "1" -- "1..*" Pedido: regista >
Pedido "1" -- "1" estadoDeAlteracaoDoPedido: tem >
Pedido "1" -- "1" estadoDeConclusaoDoPedido: tem >
Ticket "1" -- "1" Pedido: tem >
FuncionarioDaBanca "1" -- "1..*" Ticket: imprime >
Cliente "1" -- "1..*" Pedido: faz >

@enduml


PEQUENAS ALTERAÇÕES A EFETUAR:
    -> especificar melhor os erros;
    -> a navbar nao deve aparecer no not-found, por exemplo;
    -> Melhorar as transições e efeitos da navbar no recolher e ao expandir;
    -> Adicionar Tooltip ao projeto;
    -> Melhorar o loading das páginas;
    -> Estilização geral do projeto mantendo as mesmas regras;
    -> Integrar shadcn para melhorias de estilização e otimização de código;
    -> Realizar testes unitários e outros;
    -> Melhorar a velocidade do website;

MAJOR ALTERAÇÕES:
    -> ADICIONAR EVENTO;
        - Modificar a estilização com shadcn;
        - Adicionar um sonner (toast) do shadcn para quando for criado um evento com sucesso;

    -> REGISTAR PEDIDO;
        - Implementar a função de impressão das senhas;
        - Adicionar um sonner (toast) do shadcn para quando for criado um evento com sucesso;
        - Modificar a estilização com shadcn;
        - Adicionar um textarea do shadcn para as notas;
        - Adicionar um carousel do shadcn para os filtros dos itens;

    -> ADICIONAR PRODUTO;
        - Adicionar um sonner (toast) do shadcn para quando for criado um evento com sucesso;
        - Modificar a estilização com shadcn;

    -> ADICIONAR UTILIZADOR;
        - Adicionar um sonner (toast) do shadcn para quando for criado um evento com sucesso;
        - Modificar a estilização com shadcn;

    -> ANULAR/ALTERAR PEDIDO;
        - Fazer o editar - Na base de dados é anulado o pedido e é criado um novo;
        - Adicionar um pagination (shadcn) para não carregar tudo na mesma página - limitar a 10 pedidos por página;

    -> VER ESTATÍSTICAS;
        - Exportar resumo dos eventos em pdf (Janela de popup a perguntar se tem a certeza que quer exportar);
        - Imprimir as senhas dos pedidos selecionados com a checkbox;
        - Utilizar a mesma estrutura do alterarpedido (substituir a posição do searchbar e a data);
        - Estilizar a exibição dos pedidos com uma data table do shadcn;
        - Utilizar um sheet do shadcn para os filtros por itens;

    -> NAVIGATION;
        - Modificar a estilização com shadcn;
        - Usar tooltip do shadcn para os icons;

    -> EDITAR PERFIL;
        - Usar um chart do shadcn para ver  histórico de login da conta do utilizador em causa;
    
    -> AJUDA - FAQS;

    -> RESPONSIVIDADE (ALTERAÇÕES DA RESOLUÇÃO);
