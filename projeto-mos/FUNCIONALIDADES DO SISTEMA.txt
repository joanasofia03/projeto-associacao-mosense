FUNCIONALIDADES DO SISTEMA

1. Mostrar um menu.
É constituído por data hora de criação e vários itens, cada um com a respetiva quantidade (que é sempre 1) e preço.

2. Registar pedidos. 
Cada pedido pode conter vários itens do menu, tem um número (começa em 1 e vai incrementando, e reseta a cada novo dia), o nome da pessoa que fez o pedido e o nome da pessoa que registou o pedido (pode ser obtido através da sessão do utilizador). O pedido deve apresentar todos os itens, o preço por item e o preço total, e o número. Adicionalmente, um pedido tem uma data hora de criação associada e 2 estados, com 2 valores possíveis cada. O primeiro estado pode ter o valor de "Registado" ou "Concluído", este último é adquirido quando começa a ser preparado pela cozinha. O segundo estado serve para nos dizer se um pedido foi alterado ou não. Quando alguém regista um pedido errado esse pedido deve ser alterado, mas o pedido inicial não deve ser eliminado. Ou seja o pedido inicial fica com o segundo estado como "Anulado", e novo pedido tem o estado "Confirmado". Na prática, um pedido pode estar "Concluído" e "Anulado" ao mesmo tempo pois, especificamente nas Mós, a cozinha prepara sempre todos os pedidos mesmo os que foram alterados. Eventualmente esses itens vão ser adquiridos por outras pessoas, mas o software não tem essa particularidade em conta. Quando um pedido é registado, é enviado para a cozinha. Por fim, cada item num pedido pode ser levantado mais tarde ou não, devendo isso ser indicado também.

3. Alterar um pedido.
Quando se quiser alterar um pedido, deve selecionar-se um pedido da lista de pedidos, ou pesquisar pelo seu número, nome, entre outros, e proceder-se à alteração do pedido.

3. Imprimir um pedido. 
Quando um pedido é registado uma impressora imprime um ticket com a informação relevante do pedido logo a seguir.

4. Levantar pedidos.
Quando um pedido chega à cozinha e é dado início à sua preparação, o pedido passa a "Concluído", através da ação de alguém nesse lugar.

5. Visualizar os pedidos e ordená-los segundo vários critérios.
A cozinha deve apenas ver os pedidos "Registados". Dando inicio à sua preparação, o pedido passa a "Concluído" e deixa de estar visível para ela.

6. Contagem do nº de pedidos.

7. Contagem do dinheiro faturado.

(as funcionalidades 5, 6 e 7 podem ser apresentadas na mesma página)

8. Criar itens, menu, e outros.

9. Gestão das contas de utilizadores.
O Administrador do Sistema não necessita de ser criado, vem com o software, e tem acesso a todas as funcionalidades. Somente ele pode gerir as contas de utilizadores, ver a contagem do dinheiro, ter acesso à base de dados, entre outros a definir. É ele quem cria todos os outros utilizadores. Teremos outro tipo de utilizador, que será quem está na banca a registar os pedidos e a guardar o dinheiro. Teremos ainda outro tipo de utilizador, que é quem trabalha na cozinha e levanta os pedidos.

NÃO HÁ DEVOLUÇÕES.

@startuml

hide methods
left to right direction
hide circles

class Administrador 
note right
Administrador é um conceito do negócio e dos componentes de autenticação
end note

class Item {
nomeDoItem
precoDoItem
isMenu
}

class Menu {
}

class Pedido {
dataHoraDeCriacaoDoPedido
numeroDoPedido
nota
}
note right
Pode ter Itens para levantar mais tarde
end note

class estadoDeAlteracaoDoPedido {
descricaoDoEstado
}

class estadoDeConclusaoDoPedido {
descricaoDoEstado
}

class FuncionarioDaBanca
note right
FuncionarioDaBanca é um conceito do negócio e dos componentes de autenticação
end note

class FuncionarioDaCozinha
note right
FuncionarioDaCozinha é um conceito do negócio e dos componentes de autenticação
end note

class UtilizadorNaoRegistado
note right
UtilizadorNaoRegistado é um conceito do negócio e dos componentes de autenticação
end note

class Ticket

class Cliente

Administrador "1" -- "1..*" Menu: cria >
Administrador "1" -- "1..*" Pedido: gerir >
Administrador "1" -- "1..*" FuncionarioDaBanca: cria >
Administrador "1" -- "1..*" FuncionarioDaCozinha: cria >
Administrador "1" -- "1..*" Item: cria >
FuncionarioDaBanca "1" -- "1..*" Pedido: pode alterar >
FuncionarioDaBanca "1" -- "1..*" Pedido: pode listar >
Menu "1" -- "1..*" Item: tem >
Pedido "1" -- "1..*" Item: tem >
UtilizadorNaoRegistado "1" -- "1" Menu: vê >
Administrador "1" -- "1" Menu: vê >
FuncionarioDaBanca "1" -- "1" Menu: vê >
FuncionarioDaCozinha "1" -- "1" Menu: vê >
Administrador "1" -- "1..*" Menu: cria >
FuncionarioDaBanca "1" -- "1..*" Pedido: regista >
FuncionarioDaCozinha "1" -- "1..*" Pedido: conclui >
Pedido "1" -- "1" estadoDeAlteracaoDoPedido: tem >
Pedido "1" -- "1" estadoDeConclusaoDoPedido: tem >
Ticket "1" -- "1" Pedido: tem >
FuncionarioDaBanca "1" -- "1..*" Ticket: imprime >
Cliente "1" -- "1..*" Pedido: faz >

@enduml

Admin!2025#david


problemas:

- É preciso dar refresh à pagina para atualizar as coisas (Se não o fizermos, muitas vezes não funciona as alterações) 
    A ligação é perdida sempre que sai da aba (quando se move para segundo plano) e é por isso que só volta a ser reestabelecida com o reload da página.
    https://github.com/supabase/auth-js/issues/634

- o design é simples, nao uso tailwind;

- as paginas das funcionalidades todas sao acessiveis por toda a gente pelo link, mesmo que os botoes so aparecam para certos roles e apenas eles possam completar a ação;

- update policy na tabela profiles;

- falta verificar inserção de itens etc. iguais;

- alterar o "anular pedido" para "alterar", mas na base de dados é anulado e é criado um novo;

- acrescentar verificacao de datas (festas diferentes);

