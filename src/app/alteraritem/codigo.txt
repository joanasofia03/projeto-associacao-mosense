'use client';

import { useState, useEffect, useRef, useCallback, useMemo } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Button } from '@/components/ui/button';
import { Checkbox } from '@/components/ui/checkbox';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from '@/components/ui/alert-dialog';
import { toast } from 'sonner';
import { Toaster } from 'sonner';
import { cn } from "@/lib/utils"
import {
    Command,
    CommandEmpty,
    CommandGroup,
    CommandInput,
    CommandItem,
    CommandList,
} from "@/components/ui/command"
import {
    Popover,
    PopoverContent,
    PopoverTrigger,
} from "@/components/ui/popover"

// Import de icons
import { RiDeleteBin6Line } from "react-icons/ri";
import { MdOutlineEdit } from "react-icons/md";
import { CheckIcon, ChevronsUpDownIcon } from 'lucide-react'

interface TipoOption {
    value: string;
    label: string;
}

interface IvaOption {
    value: number;
    label: string;
}

interface initialData {
    tipos: TipoOption[];
    taxaIVA: IvaOption[];
}

interface Props {
    initialData: initialData;
}

// Componente CardItem
const ItemCard = ({
    item,
    onEdit,
    onDelete
}: {
    item: Item;
    onEdit: (item: Item) => void;
    onDelete: (id: string, nome: string) => void;
}) => {
    const formatDateTime = useMemo(() => {
        const date = new Date(item.criado_em);
        return {
            data: date.toLocaleDateString(),
            hora: date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })
        };
    }, [item.criado_em]);

    const handleEdit = useCallback(() => onEdit(item), [onEdit, item]);
    const handleDelete = useCallback(() => onDelete(item.id, item.nome), [onDelete, item.id, item.nome]);

    return (
        <Card className="bg-[var(--cor-fundo2)] shadow-lg border border-[var(--cor-texto)]/10 hover:shadow-xl transition-shadow duration-300">
            <CardHeader className="text-[var(--cor-texto)] border-b border-[rgba(32,41,55,0.15)]">
                <div className="flex justify-between items-center">
                    <div className="flex items-center gap-3 flex-1 min-w-0">
                        {/* Avatar da imagem */}
                        <div className="flex-shrink-0">
                            {item.imagem_url ? (
                                <img
                                    src={item.imagem_url}
                                    alt={`Imagem de ${item.nome}`}
                                    className="w-10 h-10 rounded-full object-cover border-2 border-[var(--cor-texto)]/10"
                                    onError={(e) => {
                                        // Fallback para quando a imagem não carrega
                                        const target = e.target as HTMLImageElement;
                                        target.style.display = 'none';
                                        target.nextElementSibling?.classList.remove('hidden');
                                    }}
                                />
                            ) : null}
                            {/* Fallback avatar quando não há imagem */}
                            <div className={`w-10 h-10 rounded-full bg-[#DDEB9D] border-2 border-[var(--cor-texto)]/10 flex items-center justify-center ${item.imagem_url ? 'hidden' : ''}`}>
                                <span className="text-[var(--cor-texto)] font-medium text-sm">
                                    {item.nome.charAt(0).toUpperCase()}
                                </span>
                            </div>
                        </div>

                        {/* Nome do item */}
                        <CardTitle className="text-xl text-[var(--cor-texto)] truncate flex-1 min-w-0">
                            {item.nome}
                        </CardTitle>
                    </div>

                    {/* Badge do tipo */}
                    <span className="px-3 py-1 bg-[#DDEB9D] text-[var(--cor-texto)] text-xs font-medium rounded-full flex-shrink-0">
                        {item.tipo}
                    </span>
                </div>
            </CardHeader>

            <CardContent className="px-5 flex-grow">
                <div className="space-y-3 mb-4">
                    <div className="flex justify-between items-center">
                        <span className="text-[var(--cor-texto)]">Preço:</span>
                        <span className="text-[var(--cor-texto)] font-semibold">€{item.preco.toFixed(2)}</span>
                    </div>

                    {item.IVA !== undefined && (
                        <div className="flex justify-between items-center">
                            <span className="text-[var(--cor-texto)]">IVA:</span>
                            <span className="text-[var(--cor-texto)] font-semibold">{item.IVA}%</span>
                        </div>
                    )}

                    <div className="flex justify-between items-center">
                        <span className="text-[var(--cor-texto)]">Menu:</span>
                        <span className={`font-medium ${item.isMenu ? 'text-[#1B4D3E]' : 'text-[#7D0A0A]'}`}>
                            {item.isMenu ? 'Incluído' : 'Não incluído'}
                        </span>
                    </div>

                    <div className="flex justify-between items-center text-sm text-[var(--cor-texto)]/70">
                        <span>Criado em:</span>
                        <span>{formatDateTime.data} às {formatDateTime.hora}</span>
                    </div>
                </div>

                {/* Botões de ação */}
                <div className="mt-4 grid grid-cols-2 gap-3">
                    <Button
                        onClick={handleEdit}
                        variant="botaoeditar"
                    >
                        <MdOutlineEdit className="h-4 w-4 mr-1" />
                        Editar
                    </Button>

                    <AlertDialog>
                        <AlertDialogTrigger asChild>
                            <Button
                                variant="botaoeliminar"
                            >
                                <RiDeleteBin6Line className="h-4 w-4 mr-1" />
                                Excluir
                            </Button>
                        </AlertDialogTrigger>
                        <AlertDialogContent className="bg-[var(--cor-fundo2)]">
                            <AlertDialogHeader>
                                <AlertDialogTitle className="text-[var(--cor-texto)]">
                                    Confirmar Exclusão
                                </AlertDialogTitle>
                                <AlertDialogDescription className="text-[var(--cor-texto)]/70">
                                    Tem certeza que deseja excluir o item <strong>"{item.nome}"</strong>?
                                    <br />
                                    Esta ação não pode ser desfeita.
                                </AlertDialogDescription>
                            </AlertDialogHeader>
                            <AlertDialogFooter>
                                <AlertDialogCancel className="border-[var(--cor-texto)]/20 text-[var(--cor-texto)] hover:bg-[var(--cor-texto)]/5 cursor-pointer">
                                    Cancelar
                                </AlertDialogCancel>
                                <AlertDialogAction
                                    onClick={handleDelete}
                                    className="bg-[#7D0A0A] text-[var(--cor-fundo2)] hover:bg-[#7D0A0A]/90 cursor-pointer"
                                >
                                    Excluir
                                </AlertDialogAction>
                            </AlertDialogFooter>
                        </AlertDialogContent>
                    </AlertDialog>
                </div>
            </CardContent>
        </Card>
    );
};

export default function AlterarItem({ initialData }: Props) {
    const [items, setItems] = useState<Item[]>([]);
    const [loading, setLoading] = useState(true);
    const [editingItem, setEditingItem] = useState<Item | null>(null);
    const [isDialogOpen, setIsDialogOpen] = useState(false);
    const [saving, setSaving] = useState(false);

    const [openTipo, setOpenTipo] = useState<boolean>(false)
    const [tipoSelecionado, setTipoSelecionado] = useState<string>("")

    return (
        <>
            {/* Cabeçalho */}
            <div className="bg-[#eaf2e9] text-[var(--cor-texto)] pt-5 px-10 flex justify-between align-center">
                <h1 className="text-3xl font-bold">Gerir Itens - Edição ou Exclusão</h1>
                <div className="">
                    <Label htmlFor="tipoitem" className="text-sm font-medium text-[var(--cor-texto)]">
                        Tipo de Item *
                    </Label>
                    <Popover open={openTipo} onOpenChange={setOpenTipo}>
                        <PopoverTrigger asChild>
                            <Button
                                variant="botaovoltar"
                                role="combobox"
                                aria-expanded={openTipo}
                                className="w-full justify-between"
                                type="button"
                            >
                                {tipoSelecionado
                                    ? initialData.tipos.find((tipo) => tipo.value === tipoSelecionado)?.label
                                    : "Selecionar Tipo de Item..."}
                                <ChevronsUpDownIcon className="ml-2 h-4 w-4 shrink-0 opacity-50" />
                            </Button>
                        </PopoverTrigger>
                        <PopoverContent className="min-w-[var(--radix-popover-trigger-width)] p-0">
                            <Command>
                                <CommandInput placeholder="Procurar tipo de item..." />
                                <CommandList>
                                    <CommandEmpty>Nenhum tipo encontrado.</CommandEmpty>
                                    <CommandGroup>
                                        {initialData.tipos.map((tipo) => (
                                            <CommandItem
                                                key={tipo.value}
                                                value={tipo.value}
                                                onSelect={(currentValue) => {
                                                    setTipoSelecionado(currentValue === tipoSelecionado ? "" : currentValue)
                                                    setOpenTipo(false)
                                                }}
                                            >
                                                <CheckIcon
                                                    className={cn(
                                                        "mr-2 h-4 w-4",
                                                        tipoSelecionado === tipo.value ? "opacity-100" : "opacity-0"
                                                    )}
                                                />
                                                {tipo.label}
                                            </CommandItem>
                                        ))}
                                    </CommandGroup>
                                </CommandList>
                            </Command>
                        </PopoverContent>
                    </Popover>
                </div>
            </div>

            {/* Conteúdo principal */}
            <div className="w-full py-2 px-10">
                {loading ? (
                    <div className="flex justify-center items-center h-64">
                        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-[var(--cor-texto)]"></div>
                    </div>
                ) : filteredItems.length === 0 ? (
                    <Card className="bg-[var(--cor-fundo2)] shadow-md">
                        <CardContent className="p-8 text-center">
                            <p className="text-lg text-[var(--cor-texto)]/70">Nenhum item encontrado para esta categoria.</p>
                        </CardContent>
                    </Card>
                ) : (
                    <div className="grid gap-6 grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4">
                        {filteredItems.map((item) => (
                            <ItemCard
                                key={item.id}
                                item={item}
                                onEdit={handleEditClick}
                                onDelete={handleDelete}
                            />
                        ))}
                    </div>
                )}
            </div>

            {/* Dialog de Edição */}
            <Dialog open={isDialogOpen} onOpenChange={handleCloseDialog}>
                <DialogContent className="sm:max-w-md bg-[var(--cor-fundo2)] max-h-[90vh] overflow-y-auto">
                    <DialogHeader>
                        <DialogTitle className="text-xl font-semibold text-[var(--cor-texto)]">
                            Editar Item
                        </DialogTitle>
                        <DialogDescription className="text-[var(--cor-texto)]/70">
                            Faça as alterações necessárias ao item
                        </DialogDescription>
                    </DialogHeader>

                    <div className="space-y-3">
                        <div className="space-y-2">
                            <Label htmlFor="edit-nome" className="text-sm font-medium text-[var(--cor-texto)]">
                                Nome do Item
                            </Label>
                            <Input
                                id="edit-nome"
                                value={editFormData.nome}
                                onChange={(e) => updateEditField('nome', e.target.value)}
                                className="border-[var(--cor-texto)] focus-visible:ring-0 focus-visible:ring-offset-0"
                                required
                            />
                        </div>

                        <div className="space-y-2">
                            <Label htmlFor="edit-preco" className="text-sm font-medium text-[var(--cor-texto)]">
                                Preço (€)
                            </Label>
                            <Input
                                type="number"
                                id="edit-preco"
                                value={editFormData.preco}
                                onChange={(e) => updateEditField('preco', parseFloat(e.target.value) || 0)}
                                className="border-[var(--cor-texto)] focus-visible:ring-0 focus-visible:ring-offset-0"
                                required
                                step="0.01"
                                min="0"
                            />
                        </div>

                        <div className="grid grid-cols-2 gap-4">
                            <div className="space-y-2">
                                <Label className="text-sm font-medium text-[var(--cor-texto)]">
                                    Tipo
                                </Label>
                                <Select
                                    value={editFormData.tipo}
                                    onValueChange={(value) => updateEditField('tipo', value)}
                                >
                                    <SelectTrigger className="w-full border-[var(--cor-texto)] focus:ring-0 focus:ring-offset-0">
                                        <SelectValue />
                                    </SelectTrigger>
                                    <SelectContent>
                                        {TIPOS_OPTIONS.map((option) => (
                                            <SelectItem key={option.value} value={option.value}>
                                                {option.label}
                                            </SelectItem>
                                        ))}
                                    </SelectContent>
                                </Select>
                            </div>

                            <div className="space-y-2">
                                <Label className="text-sm font-medium text-[var(--cor-texto)]">
                                    IVA (%)
                                </Label>
                                <Select
                                    value={editFormData.IVA.toString()}
                                    onValueChange={(value) => updateEditField('IVA', Number(value))}
                                >
                                    <SelectTrigger className="w-full border-[var(--cor-texto)] focus:ring-0 focus:ring-offset-0">
                                        <SelectValue />
                                    </SelectTrigger>
                                    <SelectContent>
                                        {IVA_OPTIONS.map((option) => (
                                            <SelectItem key={option.value} value={option.value.toString()}>
                                                {option.label}
                                            </SelectItem>
                                        ))}
                                    </SelectContent>
                                </Select>
                            </div>
                        </div>

                        {/* Upload de Imagem - Versão Corrigida */}
                        <ImageUpload
                            imagem={editFormData.imagem}
                            imagemPreview={editFormData.imagemPreview}
                            onImageChange={handleImageChange}
                            onImageRemove={handleImageRemove}
                        />

                        <div className="flex items-center space-x-2">
                            <Checkbox
                                id="edit-isMenu"
                                checked={editFormData.isMenu}
                                onCheckedChange={(checked) => updateEditField('isMenu', checked as boolean)}
                                className="border-[#1a4d4a] data-[state=checked]:bg-[var(--cor-texto)] data-[state=checked]:border-[var(--cor-texto)]"
                            />
                            <Label htmlFor="edit-isMenu" className="text-sm text-[var(--cor-texto)]">
                                Incluir no menu?
                            </Label>
                        </div>

                        <div className="flex justify-end space-x-3 pt-2">
                            <Button
                                variant="botaocancelar"
                                onClick={handleCloseDialog}
                                disabled={saving}
                            >
                                Cancelar
                            </Button>
                            <Button
                                variant="botaoguardar"
                                onClick={handleSave}
                                disabled={saving}
                            >
                                {saving ? 'A processar...' : 'Guardar Alterações'}
                            </Button>
                        </div>
                    </div>
                </DialogContent>
            </Dialog>
            );
        </>
}